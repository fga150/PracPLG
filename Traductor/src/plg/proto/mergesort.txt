program : mergesort{

 consts{
       const natural dim = 4;
     }   
      
   tipos{
       tipo integer[dim] array; 
     }  
     
    vars{
              var array vector;
              var natural variable1;
    }
    
   subprograms{
 
               subprogram : mezclar(array * v1, natural n1, array * v2, natural n2, array * v){
	vars{
	      var natural i;
	      var natural j;
	      var natural k;
	}
	instructions{
	       i = 0; 
	       j = 0;
	       k = 0;
	       while ((i < n1) and (j < n2)) do
	                 if (v1[i]<v2[j]) then
                                               v[k] = v1[i];
							i = i + 1;
						else
							v[k] = v2[j];
							j = j + 1;
						endif
						k = k + 1;
					endwhile
					while (i<n1) do
						v[k] = v1[i];
						i = i + 1;
						k = k + 1;
					endwhile
					while (j<n2) do
						v[k] = v2[j];
						j = j + 1;
						k = k + 1;
					endwhile
				}
		}
	
    	subprogram : mezcla(array * v, natural n){
	    	vars{
	    		var array v1;
	    		var array v2;
	    		var natural n1;
	    		var natural n2;
	    		var natural i;
	    		var natural j;
	    		var natural k;
	    	}
	    	instructions{
	    		if (n > 1) then
	    			if (n % 2 == 0) then 
	    				n1 = n / 2;
	    				n2 = n1;
	    			else 
	    				n1 = n / 2;
	    				n2 = n1 + 1;
	    			endif
	    			i = 0;
	    			while (i<n1) do
	    				v1[i] = v[i];
	    				i = i + 1;
	    			endwhile
	    			j = 0;
	    			while (j<n2) do
	    				v2[j] = v[i];
	    				j = j + 1;
	    				i = i + 1;
	    			endwhile
					call mezcla(v = v1,n = n1);
					call mezcla(v = v2,n = n2);
					call mezclar(v1 = v1, n1 = n1, v2 = v2, n2 = n2, v = v);
	    		endif
	    	}
    	}
  	
	  	subprogram : inicializaVector(array * v,natural n){
	  		vars{
	  			var natural i;
	  		}
	  		instructions{
	  			vector[0] = 4;
	  			vector[1] = 2;
	  			vector[2] = 6;
	  			vector[3] = 1;	
	  		}
	  	}
  	}
  
	instructions{
		call inicializaVector(v = vector,n = dim);
		call mezcla(v = vector,n = dim);
	}
}

